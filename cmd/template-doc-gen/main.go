package main

import (
	"fmt"
	"io"
	"os"
	"reflect"
	"strings"

	"github.com/storageos/go-cli/cli/command/formatter"
)

const indent = "  "

func main() {
	w := os.Stdout

	fmt.Fprintln(w, "// Code generated by template-doc-gen.")
	fmt.Fprintln(w, "// DO NOT EDIT!")
	fmt.Fprintln(w)
	fmt.Fprintln(w, "package constants")
	fmt.Fprintln(w)

	writeStructTemplates(w, formatter.AllObjects, writeStructMethods)
	writeStructTemplates(w, allFieldStructs, writeStructFields)
}

// writeStructTemplates writes the templates doc for structs
func writeStructTemplates(w io.Writer, vars []interface{}, writeFieldsFunc func(io.Writer, reflect.Type, int)) {
	for i, v := range vars {
		if i > 0 {
			fmt.Fprintln(w)
		}
		t := reflect.TypeOf(v)
		name := typeName(t)
		fmt.Fprintf(w, "// %[1]sTemplate is the Go template for type %[1]s\n", name)
		fmt.Fprintf(w, "var %sTemplate = `\n", name)
		fmt.Fprintln(w, "Fields:")
		writeFieldsFunc(w, t, 0)
		fmt.Fprintln(w, "`")
	}
}

func typeName(t reflect.Type) string {
	for t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	name := t.Name()
	name = strings.Title(name)
	return name
}
